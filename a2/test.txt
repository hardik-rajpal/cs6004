Soot started on Sun Mar 03 14:25:36 IST 2024
Params for <init>:
Params for <init>:
0
0
Unit: "r0 := @this: Test"{
	In: 
Unit: "r0 := @this: Node"{
	In: 
	{
		stack{
	{
		stack{
			global->[ @field_global, ]
			f->[ 			x->[ @field_x, ]
@field_f, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			x->[ 			g->[ @field_x, ]
		}
		heap{
		}
@field_g, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			f->[ @field_f, ]
			g->[ @field_g, ]
		}
		heap{
		}
	}
}
	}
}
Unit: "specialinvoke r0.<java.lang.Object: void <init>()>()"{
	In: 
Unit: "specialinvoke r0.<java.lang.Object: void <init>()>()"{
	In: 
	{
		stack{
	{
		stack{
			f->[ @field_f, ]
			global->[ @field_global, ]
			x->[ @field_x, ]
		}
		heap{
		}
			g->[ 	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
@field_g, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			f->[ @field_f, ]
			g->[ @field_g, ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			f->[ @field_f, ]
			g->[ @field_g, ]
		}
		heap{
		}
	}
	{
		stack{
			global->[ @field_global, ]
			x->[ 	Out: 
	{
		stack{
			f->[ @field_f, ]
			g->[ @field_g, ]
@field_x, ]
		}
		heap{
		}
		heap{
		}
	}
}
		}
	}
}
Escaping Info
Escaping Info
Node:<init> Test:<init> 

Params for main:
1
r2 := @parameter0: java.lang.String[]
class soot.jimple.internal.JIdentityStmt
Unit: "r2 := @parameter0: java.lang.String[]"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = new Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "staticinvoke <Test: Node foo(Node)>($r0)"{
	In: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_11, ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Escaping Info
Test:main Obj_11 
Params for bar:
1
r1 := @parameter0: Node
class soot.jimple.internal.JIdentityStmt
Unit: "r1 := @parameter0: Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = <Test: Node global>"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ @field_global, ]
			global->[ @field_global, ]
			r1->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "r2 = $r0.<Node: Node f>"{
	In: 
	{
		stack{
			$r0->[ @field_global, ]
			global->[ @field_global, ]
			r1->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@field_global.f->[ @Obj_14, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ @field_global, ]
			global->[ @field_global, ]
			r1->[ @param0, ]
			r2->[ @Obj_14, ]
			x->[ @field_x, ]
		}
		heap{
			@field_global.f->[ @Obj_14, ]
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ @field_global, ]
			global->[ @field_global, ]
			r1->[ @param0, ]
			r2->[ @Obj_14, ]
			x->[ @field_x, ]
		}
		heap{
			@field_global.f->[ @Obj_14, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ @field_global, ]
			global->[ @field_global, ]
			r1->[ @param0, ]
			r2->[ @Obj_14, ]
			x->[ @field_x, ]
		}
		heap{
			@field_global.f->[ @Obj_14, ]
		}
	}
}
Escaping Info
Test:bar 
Params for foo:
1
r0 := @parameter0: Node
class soot.jimple.internal.JIdentityStmt
Unit: "r0 := @parameter0: Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
		}
	}
}
Unit: "$r2 = r0.<Node: Node f>"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r1 = <Test: Node global>"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "if $r2 != $r1 goto $r3 = new Node"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r7 = <Test: Node global>"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r8 = $r7.<Node: Node f>"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "<Test: Node global> = $r8"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "goto [?= $r2 = r0.<Node: Node f>]"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r3 = new Node"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "specialinvoke $r3.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r6 = <Test: Node global>"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r5 = new Node"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "specialinvoke $r5.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "$r6.<Node: Node f> = $r5"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, ]
			@field_global.f->[ @Obj_18, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, Obj_21, ]
			@field_global.f->[ @Obj_18, Obj_21, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Unit: "return $r3"{
	In: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, Obj_21, ]
			@field_global.f->[ @Obj_18, Obj_21, ]
			@param0.f->[ @Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ @Obj_18, @field_global, ]
			$r2->[ @Obj_17, ]
			$r3->[ Obj_20, ]
			$r5->[ Obj_21, ]
			$r6->[ @Obj_18, @field_global, ]
			$r7->[ @Obj_18, @field_global, ]
			$r8->[ @Obj_18, ]
			global->[ @Obj_18, @field_global, ]
			r0->[ @param0, ]
			x->[ @field_x, ]
		}
		heap{
			@Obj_18.f->[ @Obj_18, Obj_21, ]
			@field_global.f->[ @Obj_18, Obj_21, ]
			@param0.f->[ @Obj_17, ]
		}
	}
}
Escaping Info
Test:foo Obj_20 Obj_21 
Soot finished on Sun Mar 03 14:25:38 IST 2024
Soot has run for 0 min. 2 sec.
