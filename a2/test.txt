Soot started on Fri Mar 01 20:00:51 IST 2024
Unit: "r0 := @this: Node"{
	In: 
Unit: "r0 := @this: Test"{
	In: 
	{
		stack{
	{
		stack{
		}
		heap{
		}
		}
		heap{
		}
	}
	Out: 
	{
		stack{
	}
	Out: 
	{
		stack{
			r0->[ 			r0->[ ]
		}
		heap{
		}
	}
}
]
		}
		heap{
		}
	}
}
Unit: "specialinvoke r0.<java.lang.Object: void <init>()>()"{
	In: 
	{
		stack{
Unit: "specialinvoke r0.<java.lang.Object: void <init>()>()"{
	In: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ 			r0->[ ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
}
]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ ]
		}
		heap{
		}
	}
}
Escaping Info
Node:<init> 
Escaping Info
Test:<init> 
r2 := @parameter0: java.lang.String[]
class soot.jimple.internal.JIdentityStmt
Unit: "r2 := @parameter0: java.lang.String[]"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = new Node"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "staticinvoke <Test: Node foo(Node)>($r0)"{
	In: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_10, ]
			@parameter0->[ param_0, ]
			r2->[ param_0, ]
		}
		heap{
		}
	}
}
Escaping Info
Test:main Obj_10 
r1 := @parameter0: Node
class soot.jimple.internal.JIdentityStmt
Unit: "r1 := @parameter0: Node"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = <Test: Node global>"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ ]
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "r2 = $r0.<Node: Node f>"{
	In: 
	{
		stack{
			$r0->[ ]
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ ]
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
			r2->[ ]
		}
		heap{
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ ]
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
			r2->[ ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ ]
			@parameter0->[ param_0, ]
			r1->[ param_0, ]
			r2->[ ]
		}
		heap{
		}
	}
}
Escaping Info
Test:bar 
r9 := @parameter0: Node
class soot.jimple.internal.JIdentityStmt
Unit: "r9 := @parameter0: Node"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = new Node"{
	In: 
	{
		stack{
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "$r2 = new Node"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r2.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
}
Unit: "$r0.<Node: Node f> = $r2"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "$r3 = new Node"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "specialinvoke $r3.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "<Test: Node global> = $r3"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "$r5 = <Test: Node global>"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "$r4 = new Node"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "specialinvoke $r4.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
}
Unit: "$r5.<Node: Node f> = $r4"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Unit: "$r6 = new Node"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Unit: "specialinvoke $r6.<Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Unit: "staticinvoke <Test: void bar(Node)>($r6)"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Unit: "$r8 = $r0.<Node: Node f>"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			$r8->[ Obj_17, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Unit: "return $r8"{
	In: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			$r8->[ Obj_17, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_16, ]
			$r2->[ Obj_17, ]
			$r3->[ Obj_18, ]
			$r4->[ Obj_19, ]
			$r5->[ Obj_18, ]
			$r6->[ Obj_20, ]
			$r8->[ Obj_17, ]
			<Test: Node global>->[ Obj_18, ]
			@parameter0->[ param_0, ]
			r9->[ param_0, ]
		}
		heap{
			Obj_16.f->[ Obj_17, ]
			Obj_18.f->[ Obj_19, ]
		}
	}
}
Escaping Info
Test:foo Obj_17 Obj_18 Obj_19 Obj_20 
Soot finished on Fri Mar 01 20:00:52 IST 2024
Soot has run for 0 min. 0 sec.
