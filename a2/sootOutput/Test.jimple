public class Test extends java.lang.Object
{
    public static Node global;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <Test: Node foo()>();

        return;
    }

    public static Node foo()
    {
        Node $r0, $r2, $r3, $r5, r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20;
        Node[] r16;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r0.<Node: Node f> = $r2;

        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        $r5 = new Node;

        specialinvoke $r5.<Node: void <init>()>();

        r7 = staticinvoke <Test: Node bar(Node,Node)>($r3, $r5);

        $r8 = new Node;

        specialinvoke $r8.<Node: void <init>()>();

        r7.<Node: Node f> = $r8;

        $r9 = <Test: Node global>;

        $r10 = $r9.<Node: Node f>;

        $r11 = $r10.<Node: Node g>;

        $r12 = $r11.<Node: Node g>;

        $r14 = $r12.<Node: Node f>;

        $r13 = new Node;

        specialinvoke $r13.<Node: void <init>()>();

        $r14.<Node: Node f> = $r13;

        $r15 = new Node;

        specialinvoke $r15.<Node: void <init>()>();

        <Test: Node global> = $r15;

        r16 = newarray (Node)[10];

        $r17 = r16[1];

        if $r17 != $r3 goto label1;

        $r20 = new Node;

        specialinvoke $r20.<Node: void <init>()>();

        r16[0] = $r20;

        goto label2;

     label1:
        $r18 = new Node;

        specialinvoke $r18.<Node: void <init>()>();

        r16[2] = $r18;

     label2:
        $r19 = r16[1];

        <Test: Node global> = $r19;

        return $r0;
    }

    public static Node bar(Node, Node)
    {
        Node $r0, $r2, r3, $r4, r5;

        r5 := @parameter0: Node;

        r3 := @parameter1: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r0.<Node: Node f> = $r2;

        $r4 = $r0.<Node: Node f>;

        r3.<Node: Node f> = $r4;

        return r5;
    }
}
