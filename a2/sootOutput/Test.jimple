public class Test extends java.lang.Object
{
    public static Node global;
    public Node x;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        Node $r0;
        java.lang.String[] r2;

        r2 := @parameter0: java.lang.String[];

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        staticinvoke <Test: Node foo(Node)>($r0);

        return;
    }

    public static void bar(Node)
    {
        Node $r0, r1, r2;

        r1 := @parameter0: Node;

        $r0 = <Test: Node global>;

        r2 = $r0.<Node: Node f>;

        return;
    }

    public static Node foo(Node)
    {
        Node r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;

        r0 := @parameter0: Node;

     label1:
        $r2 = r0.<Node: Node f>;

        $r1 = <Test: Node global>;

        if $r2 != $r1 goto label2;

        $r7 = <Test: Node global>;

        $r8 = $r7.<Node: Node f>;

        <Test: Node global> = $r8;

        goto label1;

     label2:
        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        $r6 = <Test: Node global>;

        $r5 = new Node;

        specialinvoke $r5.<Node: void <init>()>();

        $r6.<Node: Node f> = $r5;

        return $r3;
    }
}
