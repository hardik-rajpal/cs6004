public class Test extends java.lang.Object
{
    public static Node[] global;
    public Node x;
    public Man y;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void main(java.lang.String[])
    {
        Test r0;
        Node $r1;
        java.lang.String[] r3;

        r0 := @this: Test;

        r3 := @parameter0: java.lang.String[];

        $r1 = new Node;

        specialinvoke $r1.<Node: void <init>()>();

        virtualinvoke r0.<Test: Node foo(Node)>($r1);

        return;
    }

    public static Node bar(Node)
    {
        Node[] $r0, $r2;
        Node $r1, $r3, r4, r5;

        r4 := @parameter0: Node;

        $r0 = <Test: Node[] global>;

        $r1 = $r0[0];

        r5 = $r1.<Node: Node f>;

        $r2 = <Test: Node[] global>;

        $r3 = $r2[0];

        return $r3;
    }

    public Node foo(Node)
    {
        Man $r0, $r12;
        Node[] $r2;
        Node $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, r14;
        Test r11;
        int $i0, $i1;

        r11 := @this: Test;

        r14 := @parameter0: Node;

        $r0 = new Man;

        specialinvoke $r0.<Man: void <init>()>();

        $r2 = <Test: Node[] global>;

        $r3 = $r2[0];

        $r4 = $r3.<Node: Node f>;

        $r5 = $r4.<Node: Node f>;

        $r6 = $r5.<Node: Node f>;

        $r7 = $r6.<Node: Node f>;

        $r8 = $r7.<Node: Node g>;

        $r10 = $r8.<Node: Node f>;

        $r9 = new Node;

        specialinvoke $r9.<Node: void <init>()>();

        $r10.<Node: Node g> = $r9;

        $r12 = r11.<Test: Man y>;

        $i0 = $r12.<Man: int h>;

        $i1 = $i0 + 1;

        $r0.<Man: int h> = $i1;

        r11.<Test: Man y> = $r0;

        $r13 = new Node;

        specialinvoke $r13.<Node: void <init>()>();

        return $r13;
    }
}
