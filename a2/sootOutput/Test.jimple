public class Test extends java.lang.Object
{
    public Node global;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void main(java.lang.String[])
    {
        Test r0;
        java.lang.String[] r2;

        r0 := @this: Test;

        r2 := @parameter0: java.lang.String[];

        virtualinvoke r0.<Test: Node foo()>();

        return;
    }

    public Node foo()
    {
        Node $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24;
        Test r12;
        Node[] r20;

        r12 := @this: Test;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r0.<Node: Node f> = $r2;

        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        $r4 = new Node;

        specialinvoke $r4.<Node: void <init>()>();

        $r3.<Node: Node f> = $r4;

        $r5 = new Node;

        specialinvoke $r5.<Node: void <init>()>();

        $r6 = new Node;

        specialinvoke $r6.<Node: void <init>()>();

        $r5.<Node: Node g> = $r6;

        $r7 = new Node;

        specialinvoke $r7.<Node: void <init>()>();

        $r5.<Node: Node f> = $r7;

        $r8 = new Node;

        specialinvoke $r8.<Node: void <init>()>();

        staticinvoke <Test: Node bar(Node,Node)>($r5, $r8);

        $r10 = new Node;

        specialinvoke $r10.<Node: void <init>()>();

        $r11 = new Node;

        specialinvoke $r11.<Node: void <init>()>();

        $r10.<Node: Node f> = $r11;

        $r13 = r12.<Test: Node global>;

        $r14 = $r13.<Node: Node f>;

        $r15 = $r14.<Node: Node g>;

        $r16 = $r15.<Node: Node g>;

        $r18 = $r16.<Node: Node f>;

        $r17 = new Node;

        specialinvoke $r17.<Node: void <init>()>();

        $r18.<Node: Node f> = $r17;

        $r19 = new Node;

        specialinvoke $r19.<Node: void <init>()>();

        r12.<Test: Node global> = $r19;

        r20 = newarray (Node)[10];

        $r21 = r20[1];

        if $r21 != $r5 goto label1;

        $r24 = new Node;

        specialinvoke $r24.<Node: void <init>()>();

        r20[0] = $r24;

        goto label2;

     label1:
        $r22 = new Node;

        specialinvoke $r22.<Node: void <init>()>();

        r20[2] = $r22;

     label2:
        $r23 = r20[1];

        r12.<Test: Node global> = $r23;

        return $r0;
    }

    public static Node bar(Node, Node)
    {
        Node $r0, $r2, r3, $r4, r5;

        r5 := @parameter0: Node;

        r3 := @parameter1: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r0.<Node: Node f> = $r2;

        $r4 = $r0.<Node: Node f>;

        r3.<Node: Node f> = $r4;

        return r5;
    }

    public static Node[] arrtest()
    {
        Node[] r0;
        Node $r1, $r2, $r3;

        r0 = newarray (Node)[5];

        $r1 = new Node;

        specialinvoke $r1.<Node: void <init>()>();

        r0[1] = $r1;

        $r3 = r0[1];

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r3.<Node: Node f> = $r2;

        return r0;
    }
}
