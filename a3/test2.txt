Soot started on Sat Mar 30 00:15:50 IST 2024
Unit: "r1 := @parameter0: java.lang.String[]"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "staticinvoke <Test2: Test2Node foo()>()"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
			Obj_13(10).f->[ Obj_17(10), Obj_24(10,18), ]
			Obj_14(10).f->[ Obj_31(10,19), ]
		}
	}
	calleeReturnedObjects: [
Obj_13(10), ]
}
Unit: "return"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
			Obj_13(10).f->[ Obj_17(10), Obj_24(10,18), ]
			Obj_14(10).f->[ Obj_31(10,19), ]
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r1->[ @param0, ]
		}
		heap{
			Obj_13(10).f->[ Obj_17(10), Obj_24(10,18), ]
			Obj_14(10).f->[ Obj_31(10,19), ]
		}
	}
}
Unit: "$r0 = new Test2Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
		}
		heap{
		}
	}
}
Unit: "r1 = $r0"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
}
Unit: "$r2 = new Test2Node"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r2.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
}
Unit: "r3 = $r2"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
}
Unit: "$r4 = new Test1A"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r4.<Test1A: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
}
Unit: "r5 = $r4"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
}
Unit: "$r6 = new Test1B"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r6.<Test1B: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
}
Unit: "r7 = $r6"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
}
Unit: "$r8 = new Test2Node"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r8.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
}
Unit: "r1.<Test2Node: Test2Node f> = $r8"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), ]
		}
	}
}
Unit: "staticinvoke <Test2: void bar(Test2Node,Test2Node)>(r1, r3)"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
		}
	}
}
Unit: "virtualinvoke r5.<Test1A: void baz(Test2Node,Test2Node)>(r1, r3)"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
			Obj_14().f->[ Obj_31(19), ]
		}
	}
}
Unit: "virtualinvoke r7.<Test1A: void baz(Test2Node,Test2Node)>(r1, r3)"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
			Obj_14().f->[ Obj_31(19), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
			Obj_14().f->[ Obj_31(19), ]
		}
	}
}
Unit: "return r1"{
	In: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
			Obj_14().f->[ Obj_31(19), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_13(), ]
			$r2->[ Obj_14(), ]
			$r4->[ Obj_15(), ]
			$r6->[ Obj_16(), ]
			$r8->[ Obj_17(), ]
			global->[ @field_global, ]
			r1->[ Obj_13(), ]
			r3->[ Obj_14(), ]
			r5->[ Obj_15(), ]
			r7->[ Obj_16(), ]
		}
		heap{
			Obj_13().f->[ Obj_17(), Obj_24(18), ]
			Obj_14().f->[ Obj_31(19), ]
		}
	}
}
Unit: "r2 := @parameter0: Test2Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r3 := @parameter1: Test2Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = new Test2Node"{
	In: 
	{
		stack{
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r1 = $r0"{
	In: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r1->[ Obj_24(), ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r2.<Test2Node: Test2Node f> = r1"{
	In: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r1->[ Obj_24(), ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r1->[ Obj_24(), ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_24(), ]
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r1->[ Obj_24(), ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_24(), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_24(), ]
			global->[ @field_global, ]
			r1->[ Obj_24(), ]
			r2->[ @param0, ]
			r3->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_24(), ]
		}
	}
}
Unit: "r2 := @this: Test1A"{
	In: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "r3 := @parameter0: Test2Node"{
	In: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "r0 := @parameter1: Test2Node"{
	In: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "$r1 = new Test2Node"{
	In: 
	{
		stack{
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r1.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
}
Unit: "r0.<Test2Node: Test2Node f> = $r1"{
	In: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
			@param1.f->[ Obj_31(), ]
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
			@param1.f->[ Obj_31(), ]
		}
	}
	Out: 
	{
		stack{
			$r1->[ Obj_31(), ]
			r0->[ @param1, ]
			r3->[ @param0, ]
		}
		heap{
			@param1.f->[ Obj_31(), ]
		}
	}
}
Unit: "r5 := @this: Test1B"{
	In: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r2 := @parameter0: Test2Node"{
	In: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r6 := @parameter1: Test2Node"{
	In: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "$r0 = new Test1A"{
	In: 
	{
		stack{
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r0.<Test1A: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r1 = $r0"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "$r3 = new Test2Node"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "specialinvoke $r3.<Test2Node: void <init>()>()"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
}
Unit: "r2.<Test2Node: Test2Node f> = $r3"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
}
Unit: "$r4 = <java.lang.System: java.io.PrintStream out>"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			$r4->[ ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
}
Unit: "virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>(r1)"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			$r4->[ ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			$r4->[ ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
}
Unit: "return"{
	In: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			$r4->[ ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
	Out: 
	{
		stack{
			$r0->[ Obj_37(), ]
			$r3->[ Obj_38(), ]
			$r4->[ ]
			r1->[ Obj_37(), ]
			r2->[ @param0, ]
			r6->[ @param1, ]
		}
		heap{
			@param0.f->[ Obj_38(), ]
		}
	}
}
Soot finished on Sat Mar 30 00:16:07 IST 2024
Soot has run for 0 min. 16 sec.
Test1A:baz 
Test1B:baz 37:39 
Test2:bar 
Test2:foo 14:20 15:19 16:20 31:20 
Test2:main 13:10 17:10 24:10 
