public class Test extends java.lang.Object
{
    public static Node global;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <Test: Node foo()>();

        return;
    }

    public static void bar(Base, Node)
    {
        Base $r0, r2;
        Node r1;

        r2 := @parameter0: Base;

        r1 := @parameter1: Node;

        $r0 = new Base;

        specialinvoke $r0.<Base: void <init>()>();

        virtualinvoke $r0.<Base: void foo(Node)>(r1);

        return;
    }

    public static Node foo()
    {
        Node $r0, $r2, $r3, $r4;
        Derived $r5;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r4 = $r0.<Node: Node f>;

        $r2 = $r0.<Node: Node f>;

        $r3 = $r2.<Node: Node f>;

        if $r4 != $r3 goto label1;

        $r5 = new Derived;

        specialinvoke $r5.<Derived: void <init>()>();

        staticinvoke <Test: void bar(Base,Node)>($r5, $r0);

     label1:
        return $r0;
    }
}
