public class Test extends java.lang.Object
{
    public static Node global;

    public void <init>()
    {
        Test r0;

        r0 := @this: Test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <Test: Node foo()>();

        return;
    }

    public static Node foo()
<<<<<<< HEAD
    {
        Node $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, r9;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        r9 = $r0;
=======
    {
        Node $r0, $r2, $r3, $r4, $r5, $r6, $r7, r11, r12, r13, r14;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        $r2.<Node: Node f> = $r3;

        $r4 = new Node;

        specialinvoke $r4.<Node: void <init>()>();

        staticinvoke <Test: void bar(Node,Node)>($r0, $r4);

        $r5 = new Node;

        specialinvoke $r5.<Node: void <init>()>();

        if $r4 == null goto label1;

        r11 = $r5.<Node: Node f>;

        $r7 = new Node;

        specialinvoke $r7.<Node: void <init>()>();

        r12 = $r7;

        goto label2;

     label1:
        r13 = $r5.<Node: Node f>;

        $r6 = new Node;

        specialinvoke $r6.<Node: void <init>()>();

        r12 = $r6;

     label2:
        r14 = $r0.<Node: Node f>;

        virtualinvoke r12.<Node: void goo()>();

        return $r4;
    }

    public static void bar(Node, Node)
    {
        Node $r0, r2, $r3, r5, $r6, r7, r8;

        r2 := @parameter0: Node;

        r5 := @parameter1: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        r2.<Node: Node f> = $r0;

        r7 = staticinvoke <Test: Node baz()>();

        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        r7.<Node: Node f> = $r3;

        staticinvoke <Test: Node baz()>();

        r8 = staticinvoke <Test: Node f2(Node)>(r5);

        $r6 = staticinvoke <Test: Node f2(Node)>(r5);

        r8.<Node: Node f> = $r6;
>>>>>>> take2

        $r1 = new Node;

<<<<<<< HEAD
        specialinvoke $r1.<Node: void <init>()>();
=======
    public static Node baz()
    {
        Node $r0, $r2, $r3, $r4, r6;
>>>>>>> take2

        $r4 = $r1.<Node: Node f>;

        $r3 = $r1.<Node: Node g>;

        if $r4 != $r3 goto label2;

<<<<<<< HEAD
        $r6 = $r1.<Node: Node f>;

        $r5 = $r1.<Node: Node g>;

        if $r6 != $r5 goto label1;

        $r8 = new Node;

        specialinvoke $r8.<Node: void <init>()>();

        r9 = $r8;

        goto label2;

     label1:
        $r7 = new Node;

        specialinvoke $r7.<Node: void <init>()>();

        r9 = $r7;

     label2:
        return r9;
=======
        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>()>();

        $r0.<Node: Node f> = $r2;

        $r3 = new Node;

        specialinvoke $r3.<Node: void <init>()>();

        r6 = staticinvoke <Test: Node f1(Node)>($r3);

        $r4 = new Node;

        specialinvoke $r4.<Node: void <init>()>();

        r6.<Node: Node f> = $r4;

        return $r0;
    }

    public static Node f1(Node)
    {
        Node $r0, r2;

        r2 := @parameter0: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        return $r0;
    }

    public static Node f2(Node)
    {
        Node $r0, r3;

        r3 := @parameter0: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        staticinvoke <Test: Node f3(Node)>($r0);

        return $r0;
>>>>>>> take2
    }

    public static Node f3(Node)
    {
        Node $r0, $r2, r3;

        r3 := @parameter0: Node;

        $r0 = new Node;

        specialinvoke $r0.<Node: void <init>()>();

        $r2 = new Node;

        specialinvoke $r2.<Node: void <init>(Node,Node)>($r0, r3);

        return $r2;
    }
}
